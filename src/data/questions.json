{
  "questions": [
    {
      "question": "What is JavaScript and why is it important in web development?",
      "answers": [
        "JavaScript is a high-level, dynamic, and interpreted programming language used to create interactive and dynamic web pages.",
        "JavaScript is crucial in web development because it allows developers to add interactivity, perform client-side scripting, and enhance the user experience on websites.",
        "JavaScript is versatile and can be used both in the browser and on the server (Node.js), making it a full-stack development language."
      ]
    },
    {
      "question": "What are the key differences between JavaScript and Java?",
      "answers": [
        "JavaScript and Java are entirely different programming languages.",
        "JavaScript is primarily used for web development and runs in web browsers, while Java is a general-purpose language.",
        "JavaScript is dynamically typed, meaning variable types can change at runtime, whereas Java is statically typed."
      ]
    },
    {
      "question": "What is a closure in JavaScript?",
      "answers": [
        "A closure in JavaScript is a function that has access to its own scope, the outer function's scope, and the global scope.",
        "Closures are used to create private variables and maintain state in functions.",
        "They allow for data encapsulation and can be used for advanced techniques like currying and memoization."
      ]
    },
    {
      "question": "Explain the concept of 'props' in React.",
      "answers": [
        "In React, 'props' (short for properties) are a way to pass data from a parent component to a child component.",
        "Props are read-only and are used to configure and customize child components.",
        "They enable the dynamic rendering of components based on data and can be accessed using 'this.props' within a component."
      ]
    },
    {
      "question": "What is JSX in React, and why is it used?",
      "answers": [
        "JSX (JavaScript XML) is a syntax extension used in React to describe the structure and appearance of user interface components.",
        "It allows developers to write HTML-like code within JavaScript, making it easier to define and render components.",
        "JSX is transpiled to JavaScript using tools like Babel, ensuring compatibility with browsers."
      ]
    },
    {
      "question": "What is state in React?",
      "answers": [
        "State in React represents the internal data of a component.",
        "It is used to store and manage data that can change over time and affect a component's rendering.",
        "When state changes, React re-renders the component to reflect the new state, providing a dynamic user interface."
      ]
    },
    {
      "question": "What is the purpose of React Router?",
      "answers": [
        "React Router is a library for routing and navigating in React applications.",
        "It enables the creation of single-page applications with multiple views or pages.",
        "React Router helps manage URL-based navigation and keeps the UI in sync with the URL, enhancing the user experience."
      ]
    },
    {
      "question": "What is the virtual DOM in React, and why is it used?",
      "answers": [
        "The virtual DOM (Document Object Model) in React is an abstraction of the actual DOM.",
        "React uses the virtual DOM to optimize and improve performance when updating the user interface.",
        "Changes made to the virtual DOM are reconciled with the actual DOM in the most efficient way, reducing direct DOM manipulations."
      ]
    },
    {
      "question": "What are React hooks, and why were they introduced?",
      "answers": [
        "React hooks are functions that allow functional components to manage state and side effects.",
        "They were introduced to simplify the management of component logic and state in functional components.",
        "Hooks like 'useState' and 'useEffect' provide an alternative to class-based components for handling state and lifecycle events."
      ]
    },
    {
      "question": "Explain the concept of 'component lifecycle' in React.",
      "answers": [
        "In React, the component lifecycle refers to the various stages a component goes through, from initialization to rendering, updating, and unmounting.",
        "Each stage is associated with specific lifecycle methods (e.g., 'componentDidMount,' 'componentDidUpdate,' 'componentWillUnmount') that allow developers to perform actions at different points in a component's life.",
        "Understanding the component lifecycle is crucial for managing side effects and ensuring a smooth user experience."
      ]
    }
  ]
}
